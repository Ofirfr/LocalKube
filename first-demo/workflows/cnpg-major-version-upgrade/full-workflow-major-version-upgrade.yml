apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: sync-cnpg-clusters-logicaly
  namespace: best-app
spec:
  serviceAccountName: argo-service-account
  entrypoint: sync-cnpg-clusters-logicaly
  arguments:
    parameters:
      - name: source_host
        value: "best-app-pdb-14"
      - name: source_service
        value: "{{workflow.parameters.source_host}}-rw"
      - name: source_superuser
        value: "{{workflow.parameters.source_host}}-superuser"
      - name: database_name
        value: "app"
      - name: dest_host
        value: "best-app-pdb-17"
      - name: dest_service
        value: "{{workflow.parameters.dest_host}}-rw" 
      - name: dest_superuser
        value: "{{workflow.parameters.dest_host}}-superuser"
  templates:
    - name: sync-cnpg-clusters-logicaly
      inputs:
        parameters:
          - name: source_host
          - name: source_service
          - name: source_superuser
          - name: database_name
          - name: dest_host
          - name: dest_service
          - name: dest_superuser
      steps:
        # Step 1: Fetch databases
        - - name: fetch-databases
            template: fetch-databases
            arguments:
              parameters:
                - name: source_service
                  value: "{{inputs.parameters.source_service}}"
                - name: source_superuser
                  value: "{{inputs.parameters.source_superuser}}"

        # Step 2: Create publication and subscription for each fetched database
        - - name: create-pub-sub
            template: create-publication-and-subscription
            arguments:
              parameters:
                - name: database
                  value: "{{inputs.parameters.database_name}}"
                - name: source_host
                  value: "{{inputs.parameters.source_host}}"
                - name: dest_host
                  value: "{{inputs.parameters.dest_host}}"
            # withParam: "{{steps.fetch-databases.outputs.parameters.result}}"

        # Step 3: Check lag for each database
        - - name: check-lag
            template: check-lag
            arguments:
              parameters:
                - name: database
                  value: "{{inputs.parameters.database_name}}"
                - name: source_service
                  value: "{{inputs.parameters.source_service}}"
                - name: source_superuser
                  value: "{{inputs.parameters.source_superuser}}"
            # withParam: "{{steps.fetch-databases.outputs.result}}"

        # Step 4: Manual approval step
        - - name: approval
            template: manual-approval

        # Step 5: Sync sequences for each database
        - - name: sync-sequences
            template: sync-sequences
            arguments:
              parameters:
                - name: database
                  value: "{{inputs.parameters.database_name}}"
                - name: dest_service
                  value: "{{inputs.parameters.dest_service}}"
            # withParam: "{{steps.fetch-databases.outputs.result}}"

        # Step 6: Drop publications and subscriptions for each database
        - - name: drop-replications
            template: drop-replications
            arguments:
              parameters:
                - name: database
                  value: "{{inputs.parameters.database_name}}"
                - name: source_host
                  value: "{{inputs.parameters.source_host}}"
                - name: dest_host
                  value: "{{inputs.parameters.dest_host}}"
            # withParam: "{{steps.fetch-databases.outputs.result}}"

    # Template to fetch databases
    - name: fetch-databases
      inputs:
        parameters:
          - name: source_service
          - name: source_superuser
      script:
        image: ofirfr/psql:latest
        command: [sh]
        source: |
          PGPASSWORD=${POSTGRES_PASSWORD}
          export PGPASSWORD
          databases=$(psql -U ${POSTGRES_USER} -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -t -c "SELECT datname FROM pg_database WHERE datistemplate = false;")
          json_array=$(echo "$databases" | grep -v '^$' | jq -R -s -c 'split("\n")[:-1]')
          echo $json_array > /tmp/databases.json
          cat /tmp/databases.json
        env:
          - name: POSTGRES_USER
            value: "postgres"
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "{{inputs.parameters.source_superuser}}"
                key: password
          - name: POSTGRES_HOST
            value: "{{inputs.parameters.source_service}}"
          - name: POSTGRES_PORT
            value: "5432"
      outputs:
        parameters:
          - name: result
            valueFrom:
              path: /tmp/databases.json

    - name: create-publication-and-subscription
      inputs:
        parameters:
          - name: database
          - name: source_host
          - name: dest_host
      container:
        image: ofirfr/kubectl-cnpg:latest
        command: [sh, -c]
        args:
          - |
            kubectl cnpg publication create {{inputs.parameters.dest_host}} --external-cluster {{inputs.parameters.source_host}} --publication "{{inputs.parameters.database}}_migration" --all-tables --dbname {{inputs.parameters.database}}
            kubectl cnpg subscription create {{inputs.parameters.dest_host}} --external-cluster {{inputs.parameters.source_host}} --publication migration --subscription "{{inputs.parameters.database}}_migration" --dbname {{inputs.parameters.database}}

    - name: check-lag
      inputs:
        parameters:
          - name: database
          - name: source_service
          - name: source_superuser
      retryStrategy:
        limit: 10
        backoff:
          duration: "30s"
          factor: 2
      script:
        env:
          - name: POSTGRES_USER
            value: "postgres"
          - name: POSTGRES_PASSWORD
            valueFrom:
              secretKeyRef:
                name: "{{inputs.parameters.source_superuser}}"
                key: password
          - name: POSTGRES_HOST
            value: "{{inputs.parameters.source_service}}"
          - name: POSTGRES_PORT
            value: "5432"
        image: ofirfr/psql:latest
        command: [sh, -c]
        source: |
          PGPASSWORD=${POSTGRES_PASSWORD}
          export PGPASSWORD
          while true; do
            lag=$(psql -U ${POSTGRES_USER} -h ${POSTGRES_HOST} -p ${POSTGRES_PORT} -t -c "SELECT ((sent_lsn::text::pg_lsn - write_lsn::text::pg_lsn) / (pg_size_bytes(current_setting('wal_segment_size'))::int)) AS replication_lag_seconds FROM pg_stat_replication ORDER BY replication_lag_seconds LIMIT 1;")
            lag_int=$(echo "$lag * 1000" | cut -d'.' -f1)  

            if [ "$lag_int" -lt 2000 ]; then
                echo "Lag is less than 2 seconds for database {{inputs.parameters.database}}"
                exit 0
            else
                echo "Waiting for lag to drop below 2 seconds for database {{inputs.parameters.database}} (current lag: $lag)"
                sleep 30
            fi
          done

    - name: manual-approval
      suspend: {}

    - name: sync-sequences
      inputs:
        parameters:
          - name: database
          - name: dest_host
      container:
        image: ofirfr/kubectl-cnpg:latest
        command: [sh, -c]
        args:
          - |
            kubectl cnpg subscription sync-sequences --subscription "{{inputs.parameters.database}}_migration" {{inputs.parameters.dest_host}} --dbname {{inputs.parameters.database}}

    - name: drop-replications
      inputs:
        parameters:
          - name: database
          - name: source_host
          - name: dest_host
      container:
        image: ofirfr/kubectl-cnpg:latest
        command: [sh, -c]
        args:
          - |
            kubectl cnpg publication drop --external-cluster {{inputs.parameters.source_host}} {{inputs.parameters.dest_host}} --publication "{{inputs.parameters.database}}_migration" --dbname {{inputs.parameters.database}}
            kubectl cnpg subscription drop {{inputs.parameters.dest_host}} --subscription "{{inputs.parameters.database}}_migration" --dbname {{inputs.parameters.database}}
